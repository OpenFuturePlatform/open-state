plugins {
    id 'jacoco'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.4.0'
    id 'org.jetbrains.kotlin.kapt' version '1.4.0'
    id 'org.springframework.boot' version '2.3.3.RELEASE'
}

apply plugin: 'io.spring.dependency-management'

group = "io.openfuture"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
//    maven {
//        url=uri("https://maven.pkg.github.com/OpenFuturePlatform/open-state")
//        credentials {
//            username = "borbuevbeksultan"
//            password = "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"
//        }
//    }
//    maven {
//        url = uri("https://maven.pkg.github.com/trustwallet/wallet-core")
//        credentials {
//            username = "borbuevbeksultan"
//            password = "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"
//        }
//    }

}

dependencies {
    // Spring
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    implementation('org.springframework.boot:spring-boot-starter-data-redis-reactive')
    implementation('org.springframework.boot:spring-boot-starter-validation')

    // Kotlin
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('org.jetbrains.kotlin:kotlin-reflect')
    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-reactor')
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-jdk8')

//    implementation 'io.openfuture:trust-wallet-core:1.0'
//    implementation 'com.trustwallet:wallet-core:2.7.9'

    // Ethereum
    implementation('org.web3j:core:4.6.3')
    implementation('com.squareup.okhttp3:okhttp:4.8.1')

    // Binance
    implementation('com.google.protobuf:protobuf-java:3.15.6')
    implementation('com.github.binance-chain:java-sdk:v1.1.0-bscAlpha.0')

    // Utils
    implementation('commons-validator:commons-validator:1.7')
    implementation('org.apache.httpcomponents:httpclient:4.5.12')
    implementation('io.springfox:springfox-boot-starter:3.0.0')

    // DevTools
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    kapt('org.springframework.boot:spring-boot-configuration-processor')

    // Tests
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
    testImplementation("com.squareup.okhttp3:mockwebserver:4.9.0")

}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
}

// Kotlin
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

// Tests
test {
    useJUnitPlatform()

    if (project.hasProperty('maxParallelForks')) {
        maxParallelForks = project.maxParallelForks as int
    }
    if (project.hasProperty('forkEvery')) {
        forkEvery = project.forkEvery as int
    }
}
jacoco {
    toolVersion = "0.8.5"
}
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'io/openfuture/state/*Application*',
                    'io/openfuture/state/domain/**'
            ])
        })
    }
}
check.dependsOn jacocoTestReport
